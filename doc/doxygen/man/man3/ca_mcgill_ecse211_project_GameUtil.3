.TH "ca.mcgill.ecse211.project.GameUtil" 3 "Wed Nov 28 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.GameUtil
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPathFinder\fP"
.br
.ti -1c
.RI "class \fBRingSetComparator\fP"
.br
.ti -1c
.RI "class \fBRobotComparator\fP"
.br
.ti -1c
.RI "class \fBStartingComparator\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static boolean \fBisSafe\fP (int[] coor)"
.br
.ti -1c
.RI "static double [] \fBaverage\fP (int[] p1, int[] p2)"
.br
.ti -1c
.RI "static double \fBdistanceFrom\fP (int x, int y, double[] position)"
.br
.ti -1c
.RI "static int \fBfindClosestPointToRobot\fP (int[][] points)"
.br
.ti -1c
.RI "static boolean \fBisIslandBoundary\fP (int[] coor)"
.br
.ti -1c
.RI "static void \fBplayMusic\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static PathFinder \fBstartingFinder\fP"
.br
.ti -1c
.RI "static PathFinder \fBsearchingFinder\fP"
.br
.ti -1c
.RI "static char \fBleftInstruction\fP = 'L'"
.br
.ti -1c
.RI "static char \fBrightInstruction\fP = 'R'"
.br
.ti -1c
.RI "static char \fBupInstruction\fP = 'U'"
.br
.ti -1c
.RI "static char \fBdownInstruction\fP = 'D'"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBGame\fP utility class with handy functionalities can be used in the game
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 22 of file GameUtil\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "static double [] ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.average (int [] p1, int [] p2)\fC [static]\fP"
find the average of the two coordinates
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP 
.br
\fIp2\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 303 of file GameUtil\&.java\&.
.PP
.nf
303                                                      {
304     double[] result = new double[2];
305     result[0] = (double) (p1[0] + p2[0]) / 2;
306     result[1] = (double) (p1[1] + p2[1]) / 2;
307     return result;
308   }
.fi
.SS "static double ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.distanceFrom (int x, int y, double [] position)\fC [static]\fP"
find the distance from the starting point to two points
.PP
\fBParameters:\fP
.RS 4
\fIx\fP 
.br
\fIy\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 317 of file GameUtil\&.java\&.
.PP
.nf
317                                                                      {
318     return (Math\&.pow(Math\&.round(position[0]) - x, 2) + Math\&.pow(Math\&.round(position[1]) - y, 2));
319   }
.fi
.SS "static int ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.findClosestPointToRobot (int points[][])\fC [static]\fP"
find closest point from a set of points
.PP
\fBParameters:\fP
.RS 4
\fIpoints\fP a set of points 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 327 of file GameUtil\&.java\&.
.PP
.nf
327                                                             {
328     int minIndex = 0;
329     double distance = Integer\&.MAX_VALUE;
330 
331     for (int i = 0; i < points\&.length; i++) {
332       try {
333         double[] point = Odometer\&.getOdometer()\&.getXYT();
334         double thisDistance = distanceFrom(points[i][0], points[i][1], point);
335         if (thisDistance < distance) {
336           minIndex = i;
337           distance = thisDistance;
338         }
339       } catch (OdometerExceptions e) {
340         e\&.printStackTrace();
341       }
342     }
343     return minIndex;
344   }
.fi
.SS "static boolean ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.isIslandBoundary (int [] coor)\fC [static]\fP"
Check if a given point is boundary
.PP
\fBParameters:\fP
.RS 4
\fIcoor\fP the point to input 
.RE
.PP
\fBReturns:\fP
.RS 4
: whether the given point is on the boundary of an island 
.RE
.PP

.PP
Definition at line 352 of file GameUtil\&.java\&.
.PP
.nf
352                                                      {
353     int x = coor[0];
354     int y = coor[1];
355     boolean onLY = x == GameParameters\&.Island_LL[0]
356         && (y >= GameParameters\&.Island_LL[1] && y <= GameParameters\&.Island_UR[1]);
357     boolean onRY = x == GameParameters\&.Island_UR[0]
358         && (y >= GameParameters\&.Island_LL[1] && y <= GameParameters\&.Island_UR[1]);
359     boolean onLX = y == GameParameters\&.Island_LL[1]
360         && (x >= GameParameters\&.Island_LL[0] && x <= GameParameters\&.Island_UR[0]);
361     boolean onUX = y == GameParameters\&.Island_UR[1]
362         && (x >= GameParameters\&.Island_LL[0] && x <= GameParameters\&.Island_UR[0]);
363 
364     return onLY || onRY || onLX || onUX;
365   }
.fi
.SS "static boolean ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.isSafe (int [] coor)\fC [static]\fP"
check if one coordinate is safe based on (it is not a wall, tree or inside a tunnel)
.PP
\fBParameters:\fP
.RS 4
\fIcoor\fP coordinate array 
.RE
.PP
\fBReturns:\fP
.RS 4
: true if safe, false otherwise 
.RE
.PP

.PP
Definition at line 282 of file GameUtil\&.java\&.
.PP
.nf
282                                            {
283     int x = coor[0];
284     int y = coor[1];
285     boolean inTunnel = x >= GameParameters\&.TN_LL[0] && x <= GameParameters\&.TN_UR[0]
286         && y >= GameParameters\&.TN_LL[1] && y <= GameParameters\&.TN_UR[1];
287     boolean isTree = x == GameParameters\&.TREE_US[0] && y == GameParameters\&.TREE_US[1];
288     boolean outBound =
289         x <= 0 || x >= GameParameters\&.Grid_UR[0] || y <= 0 || y >= GameParameters\&.Grid_UR[1];
290     if (inTunnel || isTree || outBound) {
291       return false;
292     }
293     return true;
294   }
.fi
.SS "static void ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.playMusic ()\fC [static]\fP"

.PP
Definition at line 367 of file GameUtil\&.java\&.
.PP
.nf
367                                  {
368     Sound\&.playSample(new File("Pen\&.wav"), 100);
369   }
.fi
.SH "Member Data Documentation"
.PP 
.SS "char ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.downInstruction = 'D'\fC [static]\fP"
This variable stores a character denoting that we need to navigate downwards\&. 
.PP
Definition at line 53 of file GameUtil\&.java\&.
.SS "char ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.leftInstruction = 'L'\fC [static]\fP"
This variable stores a character denoting a left turn is required\&. 
.PP
Definition at line 38 of file GameUtil\&.java\&.
.SS "char ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.rightInstruction = 'R'\fC [static]\fP"
This variable stores a character denoting a right turn is required\&. 
.PP
Definition at line 43 of file GameUtil\&.java\&.
.SS "PathFinder ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.searchingFinder\fC [static]\fP"
This variable stores a PathFinder object instance that helps to create a path to navigate during the searching phase of a competition\&. 
.PP
Definition at line 33 of file GameUtil\&.java\&.
.SS "PathFinder ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.startingFinder\fC [static]\fP"
This variable stores a PathFinder object instance that helps to create a path to navigate at the start of a competition\&. 
.PP
Definition at line 27 of file GameUtil\&.java\&.
.SS "char ca\&.mcgill\&.ecse211\&.project\&.GameUtil\&.upInstruction = 'U'\fC [static]\fP"
This variable stores a character denoting that we need to navigate upwards\&. 
.PP
Definition at line 48 of file GameUtil\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.

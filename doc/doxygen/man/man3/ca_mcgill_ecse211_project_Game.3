.TH "ca.mcgill.ecse211.project.Game" 3 "Tue Nov 27 2018" "Version 1.0" "ECSE211 - Fall 2018 - Final Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ca.mcgill.ecse211.project.Game
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "enum \fBStatus\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "String \fBgetStatusFullName\fP ()"
.br
.ti -1c
.RI "\fBStatus\fP \fBgetStatus\fP ()"
.br
.ti -1c
.RI "boolean \fBready\fP (\fBUltrasonicLocalizer\fP us, \fBLightLocalizer\fP lgLoc)"
.br
.ti -1c
.RI "boolean \fBnavigateToTunnel\fP (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "boolean \fBnavigateToStart\fP (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "boolean \fBnavigateToAndSearcherTree\fP (\fBNavigation\fP nav, \fBRingSearcher\fP searcher)"
.br
.ti -1c
.RI "void \fBreadData\fP ()"
.br
.ti -1c
.RI "void \fBpreparation\fP ()  throws OdometerExceptions "
.br
.ti -1c
.RI "void \fBrunGame\fP ()  throws OdometerExceptions "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBThreadControl\fP \fBrgbPoller\fP"
.br
.ti -1c
.RI "\fBThreadControl\fP \fBusPoller\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBleftMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBrightMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBsensorMotor\fP"
.br
.ti -1c
.RI "static final EV3LargeRegulatedMotor \fBrodMotor\fP"
.br
.ti -1c
.RI "static final double \fBTILE\fP = 30\&.48"
.br
.ti -1c
.RI "static final double \fBWHEEL_RAD\fP = 2\&.15"
.br
.ti -1c
.RI "static final double \fBTRACK\fP = 11\&.5"
.br
.ti -1c
.RI "static final double \fBSEN_DIS\fP = 4\&.2"
.br
.in -1c
.SH "Detailed Description"
.PP 
This singleton contains all the methods and structures necessary to start competing in a game
.PP
\fBAuthor:\fP
.RS 4
Caspar Cedro 
.PP
Percy Chen 
.PP
Patrick Erath 
.PP
Anssam Ghezala 
.PP
Susan Matuszewski 
.PP
Kamy Moussavi Kafi 
.RE
.PP

.PP
Definition at line 34 of file Game\&.java\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBStatus\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.getStatus ()"
This method gets the current status of our robot
.PP
\fBReturns:\fP
.RS 4
A \fBStatus\fP enumeration value 
.RE
.PP

.PP
Definition at line 68 of file Game\&.java\&.
.PP
.nf
68                             {
69     return status;
70   }
.fi
.SS "String ca\&.mcgill\&.ecse211\&.project\&.Game\&.getStatusFullName ()"
This method gets a string representation of the status of our robot
.PP
\fBReturns:\fP
.RS 4
A string of the status variable 
.RE
.PP

.PP
Definition at line 59 of file Game\&.java\&.
.PP
.nf
59                                     {
60     return status\&.toString();
61   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToAndSearcherTree (\fBNavigation\fP nav, \fBRingSearcher\fP searcher)"
This method navigates our robot to the tree and tries to find rings
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 167 of file Game\&.java\&.
.PP
.nf
168   {
169     boolean wasEventProcessed = false;
170     
171     Status aStatus = status;
172     switch (aStatus)
173     {
174       case AtTunnel:
175         // line 16 "model\&.ump"
176         searchRing(nav, searcher);
177         setStatus(Status\&.AtTree);
178         wasEventProcessed = true;
179         break;
180       default:
181         // Other states do respond to this event
182     }
183 
184     return wasEventProcessed;
185   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToStart (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
This method navigates our robot to the starting corner
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIInterruptedException\fP 
.RE
.PP

.PP
Definition at line 142 of file Game\&.java\&.
.PP
.nf
143   {
144     boolean wasEventProcessed = false;
145     
146     Status aStatus = status;
147     switch (aStatus)
148     {
149       case AtTunnel:
150         // line 12 "model\&.ump"
151         navigateStart(navigation, searcher);
152         setStatus(Status\&.Idle);
153         wasEventProcessed = true;
154         break;
155       default:
156         // Other states do respond to this event
157     }
158 
159     return wasEventProcessed;
160   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.navigateToTunnel (\fBNavigation\fP navigation, \fBRingSearcher\fP searcher)"
This method navigates our robot to the tunnel or search area
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 109 of file Game\&.java\&.
.PP
.nf
110   {
111     boolean wasEventProcessed = false;
112     
113     Status aStatus = status;
114     switch (aStatus)
115     {
116       case Localized:
117         // line 8 "model\&.ump"
118         navigateTunnel(navigation);
119         setStatus(Status\&.AtTunnel);
120         wasEventProcessed = true;
121        // System\&.out\&.println("YEYEYEY");
122         break;
123       case AtTree:
124         // line 17 "model\&.ump"
125         navigateBackTunnel(navigation, searcher);
126         setStatus(Status\&.AtTunnel);
127         wasEventProcessed = true;
128         break;
129       default:
130         // Other states do respond to this event
131     }
132 
133     return wasEventProcessed;
134   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.preparation () throws \fBOdometerExceptions\fP"
This method performs all the object instantiations and preparations necessary to get our robot to compete
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 358 of file Game\&.java\&.
.PP
.nf
358                                                       {
359     // Motor Objects, and Robot related parameters
360     Port usPort = LocalEV3\&.get()\&.getPort("S1");
361     // initialize multiple light ports in main
362     Port[] lgPorts = new Port[3];
363 
364     // Light sensor sensor stuff
365     lgPorts[0] = LocalEV3\&.get()\&.getPort("S2");
366     lgPorts[1] = LocalEV3\&.get()\&.getPort("S3");
367     lgPorts[2] = LocalEV3\&.get()\&.getPort("S4");
368     EV3ColorSensor[] lgSensors = new EV3ColorSensor[3];
369     for (int i = 0; i < lgSensors\&.length; i++) {
370       lgSensors[i] = new EV3ColorSensor(lgPorts[i]);
371     }
372 
373     Odometer odometer = Odometer\&.getOdometer(leftMotor, rightMotor, TRACK, WHEEL_RAD);
374 
375     // Sensor Related Stuff
376     SensorData sensorData = SensorData\&.getSensorData();
377 
378     // Ultrasonic sensor stuff
379     @SuppressWarnings("resource")
380     SensorModes usSensor = new EV3UltrasonicSensor(usPort);
381     SampleProvider usDistance = usSensor\&.getMode("Distance");
382     float[] usData = new float[usDistance\&.sampleSize()];
383 
384     SampleProvider backLight[] = new SampleProvider[2];
385     backLight[0] = lgSensors[0]\&.getRedMode();
386     backLight[1] = lgSensors[1]\&.getRedMode();
387     
388     //colour detection sensor
389     SampleProvider frontLight[] = new SampleProvider[1];
390     frontLight[0] = lgSensors[2]\&.getRGBMode();
391 
392 //    TextLCD lcd = LocalEV3\&.get()\&.getTextLCD();
393 //    Display odometryDisplay = new Display(lcd);
394 //    // STEP 1: LOCALIZE to (1,1)
395 //    // ButtonChoice left or right
396 //    lcd\&.clear();
397 //    lcd\&.drawString("<  Left  |  Right >", 0, 0);
398 //    lcd\&.drawString(" falling | rising  ", 0, 1);
399 //    lcd\&.drawString("  edge   |  edge   ", 0, 2);
400 //    lcd\&.drawString("        \\/        ", 0, 3);
401 //    lcd\&.drawString("  Color Detection  ", 0, 4);
402 
403     // Start odometer and odometer display
404     Thread odoThread = new Thread(odometer);
405     odoThread\&.start();
406 //    Thread odoDisplayThread = new Thread(odometryDisplay);
407 //    odoDisplayThread\&.start();
408     Sound\&.beep();
409     // Start ultrasonic and light sensors
410     usPoller = new UltrasonicPoller(usDistance, usData, sensorData);
411     Thread usThread = new Thread(usPoller);
412     usThread\&.start();
413     lightPoller = new LightPoller(backLight, new float[2][backLight[1]\&.sampleSize()], sensorData);
414     Thread lightThread = new Thread(lightPoller);
415     lightThread\&.start();
416 
417     rgbPoller = new RGBPoller(frontLight, new float[1][frontLight[0]\&.sampleSize()], sensorData);
418     Thread rgbThread = new Thread(rgbPoller);
419     
420     rgbThread\&.start();
421     
422    
423   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.readData ()"
This method reads data from the \fBWiFi\fP class (using another thread) 
.PP
Definition at line 259 of file Game\&.java\&.
.PP
.nf
259                          {
260     WiFi\&.readData();
261   }
.fi
.SS "boolean ca\&.mcgill\&.ecse211\&.project\&.Game\&.ready (\fBUltrasonicLocalizer\fP us, \fBLightLocalizer\fP lgLoc)"
This method performs localizes our robot
.PP
\fBReturns:\fP
.RS 4
A boolean that denotes whether our state transition occurred 
.RE
.PP

.PP
Definition at line 77 of file Game\&.java\&.
.PP
.nf
78   {
79     boolean wasEventProcessed = false;
80     
81     Status aStatus = status;
82     switch (aStatus)
83     {
84       case Idle:
85         // line 5 "model\&.ump"
86         try {
87           localizeAndReadData(us, lgLoc);
88         } catch (OdometerExceptions e) {
89           // TODO Auto-generated catch block
90           e\&.printStackTrace();
91         }
92     //    System\&.out\&.println("YqsdpkqsoihqiufdhqiudhqY");
93         setStatus(Status\&.Localized);
94         wasEventProcessed = true;
95         break;
96       default:
97         // Other states do respond to this event
98     }
99     Sound\&.beep();
100     Sound\&.beep();
101     return wasEventProcessed;
102   }
.fi
.SS "void ca\&.mcgill\&.ecse211\&.project\&.Game\&.runGame () throws \fBOdometerExceptions\fP"
This method is called when the after the robot has been prepared and is ready to compete
.PP
\fBExceptions:\fP
.RS 4
\fIOdometerExceptions\fP 
.RE
.PP

.PP
Definition at line 430 of file Game\&.java\&.
.PP
.nf
430                                                   {
431     GameParameters\&.Demo = DemoType\&.Beta;
432     // Start localizing
433     final Navigation navigation = new Navigation(leftMotor, rightMotor);
434     final UltrasonicLocalizer usLoc = new UltrasonicLocalizer(navigation, leftMotor, rightMotor);
435     final LightLocalizer lgLoc = new LightLocalizer(navigation, leftMotor, rightMotor);
436     final RingSearcher searcher = new RingSearcher(sensorMotor, rodMotor);
437     
438     Button\&.waitForAnyPress(); // Wait for button press to start
439       INSTANCE\&.ready(usLoc, lgLoc);
440       
441       //instantiate path finder
442       GameUtil\&.searchingFinder = new GameUtil\&.PathFinder(GameParameters\&.Island_LL, GameParameters\&.Island_UR);
443       GameUtil\&.startingFinder = new GameUtil\&.PathFinder(GameParameters\&.US_LL, GameParameters\&.US_UR);
444       INSTANCE\&.navigateToTunnel(navigation, searcher);
445       INSTANCE\&.navigateToAndSearcherTree(navigation, searcher);
446       INSTANCE\&.navigateToTunnel(navigation, searcher);
447       INSTANCE\&.navigateToStart(navigation, searcher);
448   }
.fi
.SH "Member Data Documentation"
.PP 
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.leftMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("A"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the left motor connected to port A 
.PP
Definition at line 214 of file Game\&.java\&.
.SS "\fBThreadControl\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.rgbPoller"
This variable stores a ThreadController instance that controls our RGB sensor 
.PP
Definition at line 199 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.rightMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("D"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the right motor connected to port D 
.PP
Definition at line 220 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.rodMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("B"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the motor on the rod for collecting rings 
.PP
Definition at line 232 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.SEN_DIS = 4\&.2\fC [static]\fP"
This variable stores the distance between the light sensor and center of the robot in cm 
.PP
Definition at line 254 of file Game\&.java\&.
.SS " static  final EV3LargeRegulatedMotor ca\&.mcgill\&.ecse211\&.project\&.Game\&.sensorMotor\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
      new EV3LargeRegulatedMotor(LocalEV3\&.get()\&.getPort("C"))
.fi
This variable stores an EV3LargeRegulatedMotor object instance that allows control of the motor on storage rod 
.PP
Definition at line 226 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.TILE = 30\&.48\fC [static]\fP"
This variable stores the length of a tile in cm 
.PP
Definition at line 238 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.TRACK = 11\&.5\fC [static]\fP"
This variable holds the track distance between the center of the wheels in cm (measured and adjusted based on trial and error) 
.PP
Definition at line 249 of file Game\&.java\&.
.SS "\fBThreadControl\fP ca\&.mcgill\&.ecse211\&.project\&.Game\&.usPoller"
This variable stores a ThreadController instance that controls our ultrasonic sensor 
.PP
Definition at line 209 of file Game\&.java\&.
.SS " static  final double ca\&.mcgill\&.ecse211\&.project\&.Game\&.WHEEL_RAD = 2\&.15\fC [static]\fP"
This variable stores the radius of our wheels in cm 
.PP
Definition at line 243 of file Game\&.java\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ECSE211 - Fall 2018 - Final Project from the source code\&.
